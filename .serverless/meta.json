{
  "C:\\proyectoTemporal\\swapi-weather-fusion\\serverless.yml": {
    "versionFramework": "4.18.0",
    "servicePath": "C:\\proyectoTemporal\\swapi-weather-fusion\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "joaquinproyecto",
      "app": "proyectosofttek",
      "service": "swapi-weather-fusion",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "memorySize": 512,
        "timeout": 29,
        "deploymentBucket": "swapi-weather-fusion-deploy-bucket",
        "disableRollback": true,
        "environment": {
          "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
          "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
          "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
          "NODE_OPTIONS": "--enable-source-maps",
          "JWT_SECRET": "<REDACTED>"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Scan",
              "dynamodb:Query"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
              "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
              "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
              "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:PutParameter"
            ],
            "Resource": "*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "swapi-weather-fusion-deploy-bucket"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "LoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-login"
              }
            },
            "GetFusionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
              }
            },
            "PostStoreLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
              }
            },
            "GetHistoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
              }
            },
            "JwtAuthorizerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-jwtAuthorizer"
              }
            },
            "DocsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-docs"
              }
            },
            "DocsJsonLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-docsJson"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "swapi-weather-fusion",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:Scan",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
                            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
                            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject"
                          ],
                          "Resource": [
                            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
                            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "ssm:GetParameter",
                            "ssm:PutParameter"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "swapi-weather-fusion",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "LoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/login.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-login",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LoginLogGroup"
              ]
            },
            "GetFusionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/fusion.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-getFusion",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetFusionLogGroup"
              ]
            },
            "PostStoreLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/store.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-postStore",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostStoreLogGroup"
              ]
            },
            "GetHistoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/history.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-getHistory",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetHistoryLogGroup"
              ]
            },
            "JwtAuthorizerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "lib/authMiddleware.requireAuth",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-jwtAuthorizer",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "JwtAuthorizerLogGroup"
              ]
            },
            "DocsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/docs.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-docs",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DocsLogGroup"
              ]
            },
            "DocsJsonLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/docs.jsonHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-docsJson",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps",
                    "JWT_SECRET": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DocsJsonLogGroup"
              ]
            },
            "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetFusionLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostStoreLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetHistoryLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "JwtAuthorizerLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DocsLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DocsJsonLambdaFunction"
                },
                "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-swapi-weather-fusion",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceFusionados": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "fusionados",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAlmacenar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "almacenar",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceHistorial": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "historial",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDocs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "docs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDocsjson": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "docs.json",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodFusionadosOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFusionados"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAlmacenarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAlmacenar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHistorialOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHistorial"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDocsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDocs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDocsjsonOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDocsjson"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LoginLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LoginLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodFusionadosGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFusionados"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "JwtAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetFusionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "JwtAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAlmacenarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAlmacenar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "JwtAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostStoreLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "JwtAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodHistorialGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHistorial"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "JwtAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetHistoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "JwtAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodDocsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDocs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DocsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DocsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDocsjsonGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDocsjson"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DocsJsonLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DocsJsonLambdaPermissionApiGateway"
              ]
            },
            "JwtAuthorizerApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "AuthorizerResultTtlInSeconds": 300,
                "IdentitySource": "method.request.header.Authorization",
                "Name": "jwtAuthorizer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "AuthorizerUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "JwtAuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "Type": "REQUEST"
              }
            },
            "ApiGatewayDeployment1754885229691": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodLoginOptions",
                "ApiGatewayMethodFusionadosOptions",
                "ApiGatewayMethodAlmacenarOptions",
                "ApiGatewayMethodHistorialOptions",
                "ApiGatewayMethodDocsOptions",
                "ApiGatewayMethodDocsjsonOptions",
                "ApiGatewayMethodLoginPost",
                "ApiGatewayMethodFusionadosGet",
                "ApiGatewayMethodAlmacenarPost",
                "ApiGatewayMethodHistorialGet",
                "ApiGatewayMethodDocsGet",
                "ApiGatewayMethodDocsjsonGet"
              ]
            },
            "LoginLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetFusionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetFusionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "JwtAuthorizerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "JwtAuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PostStoreLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostStoreLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetHistoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetHistoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DocsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DocsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DocsJsonLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DocsJsonLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "FusionTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "swapi-weather-fusion-FusionTable",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "pk",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "sk",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "sk",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": false
                },
                "Tags": [
                  {
                    "Key": "Purpose",
                    "Value": "FusionDataStorage"
                  },
                  {
                    "Key": "Service",
                    "Value": "swapi-weather-fusion"
                  }
                ]
              }
            },
            "CacheTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "swapi-weather-fusion-CacheTable",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "cacheKey",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "cacheKey",
                    "KeyType": "HASH"
                  }
                ],
                "TimeToLiveSpecification": {
                  "AttributeName": "expiresAt",
                  "Enabled": true
                },
                "Tags": [
                  {
                    "Key": "Purpose",
                    "Value": "APICache"
                  },
                  {
                    "Key": "Service",
                    "Value": "swapi-weather-fusion"
                  }
                ]
              }
            },
            "CustomTableV2": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "swapi-weather-fusion-CustomTableV2",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "pk",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "sk",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "sk",
                    "KeyType": "RANGE"
                  }
                ],
                "Tags": [
                  {
                    "Key": "Purpose",
                    "Value": "CustomDataStorage"
                  },
                  {
                    "Key": "Service",
                    "Value": "swapi-weather-fusion"
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "swapi-weather-fusion-deploy-bucket",
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
              }
            },
            "LoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-LoginLambdaFunctionQualifiedArn"
              }
            },
            "GetFusionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
              }
            },
            "PostStoreLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
              }
            },
            "GetHistoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
              }
            },
            "JwtAuthorizerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-JwtAuthorizerLambdaFunctionQualifiedArn"
              }
            },
            "DocsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-DocsLambdaFunctionQualifiedArn"
              }
            },
            "DocsJsonLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-DocsJsonLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-offline"
      ],
      "functions": {
        "login": {
          "handler": "handlers/login.handler",
          "events": [
            {
              "http": {
                "path": "login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-login",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk"
        },
        "getFusion": {
          "handler": "handlers/fusion.handler",
          "events": [
            {
              "http": {
                "path": "fusionados",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "jwtAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "JwtAuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-getFusion",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw"
        },
        "postStore": {
          "handler": "handlers/store.handler",
          "events": [
            {
              "http": {
                "path": "almacenar",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "jwtAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "JwtAuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-postStore",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw"
        },
        "getHistory": {
          "handler": "handlers/history.handler",
          "events": [
            {
              "http": {
                "path": "historial",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "jwtAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "JwtAuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-getHistory",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ"
        },
        "jwtAuthorizer": {
          "handler": "lib/authMiddleware.requireAuth",
          "events": [],
          "name": "swapi-weather-fusion-dev-jwtAuthorizer",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c"
        },
        "docs": {
          "handler": "handlers/docs.handler",
          "events": [
            {
              "http": {
                "path": "docs",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-docs",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w"
        },
        "docsJson": {
          "handler": "handlers/docs.jsonHandler",
          "events": [
            {
              "http": {
                "path": "docs.json",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-docsJson",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI"
        }
      },
      "resources": {
        "Resources": {
          "FusionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-FusionTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": false
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "FusionDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CacheTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "cacheKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "cacheKey",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "expiresAt",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "APICache"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CustomTableV2": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CustomTableV2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "CustomDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          }
        },
        "Outputs": {}
      },
      "custom": {
        "documentation": {
          "api": {
            "info": {
              "version": "1.0.0",
              "title": "SWAPI Weather Fusion API",
              "description": "API que fusiona datos de Star Wars (SWAPI) con información meteorológica",
              "contact": {
                "name": "Equipo Softtek",
                "email": "soporte@softtek.com"
              },
              "license": {
                "name": "MIT",
                "url": "https://opensource.org/licenses/MIT"
              }
            },
            "servers": [
              {
                "url": "https://api.gateway.url",
                "description": "Servidor de producción"
              },
              {
                "url": "http://localhost:3000",
                "description": "Servidor local"
              }
            ],
            "components": {
              "securitySchemes": {
                "bearerAuth": {
                  "type": "http",
                  "scheme": "bearer",
                  "bearerFormat": "JWT"
                }
              }
            },
            "tags": [
              {
                "name": "Authentication",
                "description": "Operaciones de autenticación"
              },
              {
                "name": "Fusion Data",
                "description": "Datos combinados SWAPI + Weather"
              },
              {
                "name": "Data Storage",
                "description": "Almacenamiento de datos personalizados"
              },
              {
                "name": "History",
                "description": "Historial de operaciones"
              },
              {
                "name": "Documentation",
                "description": "Documentación de la API"
              }
            ]
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "memorySize": 512,
      "timeout": 29,
      "deploymentBucket": "swapi-weather-fusion-deploy-bucket",
      "disableRollback": true,
      "environment": {
        "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
        "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
        "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
        "NODE_OPTIONS": "--enable-source-maps",
        "JWT_SECRET": "<REDACTED>"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Scan",
            "dynamodb:Query"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:PutParameter"
          ],
          "Resource": "*"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "swapi-weather-fusion-deploy-bucket"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-login"
            }
          },
          "GetFusionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
            }
          },
          "PostStoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
            }
          },
          "GetHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
            }
          },
          "JwtAuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-jwtAuthorizer"
            }
          },
          "DocsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-docs"
            }
          },
          "DocsJsonLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-docsJson"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "swapi-weather-fusion",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Scan",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
                          "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
                          "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
                          "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ssm:GetParameter",
                          "ssm:PutParameter"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "swapi-weather-fusion",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/login.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-login",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "GetFusionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/fusion.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-getFusion",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFusionLogGroup"
            ]
          },
          "PostStoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/store.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-postStore",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostStoreLogGroup"
            ]
          },
          "GetHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/history.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-getHistory",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetHistoryLogGroup"
            ]
          },
          "JwtAuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "lib/authMiddleware.requireAuth",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-jwtAuthorizer",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JwtAuthorizerLogGroup"
            ]
          },
          "DocsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/docs.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-docs",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DocsLogGroup"
            ]
          },
          "DocsJsonLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/docs.jsonHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-docsJson",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps",
                  "JWT_SECRET": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DocsJsonLogGroup"
            ]
          },
          "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFusionLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostStoreLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetHistoryLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JwtAuthorizerLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DocsLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DocsJsonLambdaFunction"
              },
              "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-swapi-weather-fusion",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFusionados": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fusionados",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlmacenar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "almacenar",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHistorial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "historial",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDocs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "docs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDocsjson": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "docs.json",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFusionadosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlmacenarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHistorialOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDocsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDocs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDocsjsonOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDocsjson"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFusionadosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFusionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAlmacenarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostStoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodHistorialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodDocsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDocs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DocsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DocsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDocsjsonGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDocsjson"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DocsJsonLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DocsJsonLambdaPermissionApiGateway"
            ]
          },
          "JwtAuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "jwtAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "JwtAuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "REQUEST"
            }
          },
          "ApiGatewayDeployment1754885229691": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodLoginOptions",
              "ApiGatewayMethodFusionadosOptions",
              "ApiGatewayMethodAlmacenarOptions",
              "ApiGatewayMethodHistorialOptions",
              "ApiGatewayMethodDocsOptions",
              "ApiGatewayMethodDocsjsonOptions",
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodFusionadosGet",
              "ApiGatewayMethodAlmacenarPost",
              "ApiGatewayMethodHistorialGet",
              "ApiGatewayMethodDocsGet",
              "ApiGatewayMethodDocsjsonGet"
            ]
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFusionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFusionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JwtAuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JwtAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostStoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostStoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetHistoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DocsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DocsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DocsJsonLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DocsJsonLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FusionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-FusionTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": false
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "FusionDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CacheTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "cacheKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "cacheKey",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "expiresAt",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "APICache"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CustomTableV2": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CustomTableV2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "CustomDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "swapi-weather-fusion-deploy-bucket",
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "GetFusionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
            }
          },
          "PostStoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
            }
          },
          "GetHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
            }
          },
          "JwtAuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-JwtAuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "DocsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-DocsLambdaFunctionQualifiedArn"
            }
          },
          "DocsJsonLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-DocsJsonLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "6TLrvJKDd3v9wsfCMf",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "org: joaquinproyecto\r\napp: proyectosofttek\r\nservice: swapi-weather-fusion\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: us-east-1\r\n  memorySize: 512\r\n  timeout: 29\r\n  deploymentBucket:\r\n    name: swapi-weather-fusion-deploy-bucket\r\n  disableRollback: true\r\n  \r\n  environment:\r\n    FUSION_TABLE: ${self:service}-FusionTable\r\n    CACHE_TABLE: ${self:service}-CacheTable\r\n    CUSTOM_TABLE: ${self:service}-CustomTableV2\r\n    NODE_OPTIONS: '--enable-source-maps'\r\n    JWT_SECRET: SofttekSecretKey\r\n    \r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:Scan\r\n        - dynamodb:Query\r\n      Resource:\r\n        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-FusionTable\r\n        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-CacheTable\r\n        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-CustomTableV2\r\n    - Effect: Allow\r\n      Action:\r\n        - s3:GetObject\r\n        - s3:PutObject\r\n      Resource:\r\n        - arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001\r\n        - arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*\r\n    - Effect: Allow\r\n      Action:\r\n        - ssm:GetParameter\r\n        - ssm:PutParameter\r\n      Resource: \"*\"\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nfunctions:\r\n  # LOGIN: Genera y devuelve un JWT\r\n  login:\r\n    handler: handlers/login.handler\r\n    events:\r\n      - http:\r\n          path: login\r\n          method: post\r\n          cors: true\r\n  \r\n  getFusion:\r\n    handler: handlers/fusion.handler\r\n    events:\r\n      - http:\r\n          path: fusionados\r\n          method: get\r\n          cors: true\r\n          authorizer:\r\n            name: jwtAuthorizer\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n    \r\n  postStore:\r\n    handler: handlers/store.handler\r\n    events:\r\n      - http:\r\n          path: almacenar\r\n          method: post\r\n          cors: true\r\n          authorizer:\r\n            name: jwtAuthorizer\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n    \r\n  getHistory:\r\n    handler: handlers/history.handler\r\n    events:\r\n      - http:\r\n          path: historial\r\n          method: get\r\n          cors: true\r\n          authorizer:\r\n            name: jwtAuthorizer\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n\r\n  # Authorizer Lambda para validar JWT\r\n  jwtAuthorizer:\r\n    handler: lib/authMiddleware.requireAuth\r\n\r\n  docs:\r\n    handler: handlers/docs.handler\r\n    events:\r\n      - http:\r\n          path: docs\r\n          method: get\r\n          cors: true\r\n          \r\n  docsJson:\r\n    handler: handlers/docs.jsonHandler\r\n    events:\r\n      - http:\r\n          path: docs.json\r\n          method: get\r\n          cors: true\r\n           \r\nresources:\r\n  Resources:\r\n    FusionTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-FusionTable\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: pk\r\n            AttributeType: S\r\n          - AttributeName: sk\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: pk\r\n            KeyType: HASH\r\n          - AttributeName: sk\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: false\r\n        Tags:\r\n          - Key: Purpose\r\n            Value: FusionDataStorage\r\n          - Key: Service\r\n            Value: ${self:service}\r\n\r\n    CacheTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-CacheTable\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: cacheKey\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: cacheKey\r\n            KeyType: HASH\r\n        TimeToLiveSpecification:\r\n          AttributeName: expiresAt\r\n          Enabled: true\r\n        Tags:\r\n          - Key: Purpose\r\n            Value: APICache\r\n          - Key: Service\r\n            Value: ${self:service}\r\n\r\n    CustomTableV2:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-CustomTableV2\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: pk\r\n            AttributeType: S\r\n          - AttributeName: sk\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: pk\r\n            KeyType: HASH\r\n          - AttributeName: sk\r\n            KeyType: RANGE\r\n        Tags:\r\n          - Key: Purpose\r\n            Value: CustomDataStorage\r\n          - Key: Service\r\n            Value: ${self:service}\r\ncustom:\r\n  documentation:\r\n    api:\r\n      info:\r\n        version: '1.0.0'\r\n        title: SWAPI Weather Fusion API\r\n        description: 'API que fusiona datos de Star Wars (SWAPI) con información meteorológica'\r\n        contact:\r\n          name: Equipo Softtek\r\n          email: soporte@softtek.com\r\n        license:\r\n          name: MIT\r\n          url: https://opensource.org/licenses/MIT\r\n      servers:\r\n        - url: https://api.gateway.url\r\n          description: Servidor de producción\r\n        - url: http://localhost:3000\r\n          description: Servidor local\r\n      components:\r\n        securitySchemes:\r\n          bearerAuth:\r\n            type: http\r\n            scheme: bearer\r\n            bearerFormat: JWT\r\n      tags:\r\n        - name: Authentication\r\n          description: Operaciones de autenticación\r\n        - name: Fusion Data\r\n          description: Datos combinados SWAPI + Weather\r\n        - name: Data Storage\r\n          description: Almacenamiento de datos personalizados\r\n        - name: History\r\n          description: Historial de operaciones\r\n        - name: Documentation\r\n          description: Documentación de la API",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "230a4241-e75f-44ae-9e42-df758922803f",
    "orgName": "joaquinproyecto",
    "userId": "2WtbjR3PbJQWtTF7PT",
    "userName": "joaquinproyecto",
    "serviceProviderAwsAccountId": "399605429268",
    "serviceProviderAwsCfStackName": "swapi-weather-fusion-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:399605429268:stack/swapi-weather-fusion-dev/1a3ec1b0-7596-11f0-a8ab-123a81415df7",
    "serviceProviderAwsCfStackCreated": "2025-08-10T02:59:59.557Z",
    "serviceProviderAwsCfStackUpdated": "2025-08-11T04:05:18.636Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DocsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-docs:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-DocsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DocsJsonLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-docsJson:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-DocsJsonLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "JwtAuthorizerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-jwtAuthorizer:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-JwtAuthorizerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetHistoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-getHistory:30",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetFusionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-getFusion:30",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PostStoreLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-postStore:30",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-login:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-LoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://1btqwn6691.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "swapi-weather-fusion-deploy-bucket",
        "ExportName": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "LoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-login"
          }
        },
        "GetFusionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
          }
        },
        "PostStoreLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
          }
        },
        "GetHistoryLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
          }
        },
        "JwtAuthorizerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-jwtAuthorizer"
          }
        },
        "DocsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-docs"
          }
        },
        "DocsJsonLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-docsJson"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "swapi-weather-fusion",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
                        "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
                        "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
                        "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter",
                        "ssm:PutParameter"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "swapi-weather-fusion",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "LoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/login.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-login",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LoginLogGroup"
          ]
        },
        "GetFusionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/fusion.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-getFusion",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetFusionLogGroup"
          ]
        },
        "PostStoreLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/store.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-postStore",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostStoreLogGroup"
          ]
        },
        "GetHistoryLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/history.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-getHistory",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetHistoryLogGroup"
          ]
        },
        "JwtAuthorizerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "lib/authMiddleware.requireAuth",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-jwtAuthorizer",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "JwtAuthorizerLogGroup"
          ]
        },
        "DocsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/docs.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-docs",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DocsLogGroup"
          ]
        },
        "DocsJsonLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754885237993-2025-08-11T04:07:17.993Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/docs.jsonHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-docsJson",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps",
                "JWT_SECRET": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DocsJsonLogGroup"
          ]
        },
        "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LoginLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetFusionLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostStoreLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetHistoryLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "JwtAuthorizerLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DocsLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DocsJsonLambdaFunction"
            },
            "CodeSha256": "4sjJUVAOb2MbHAz/nyLMyeFIVn65BMUXe5djg+C+amE="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-swapi-weather-fusion",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceLogin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "login",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceFusionados": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "fusionados",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAlmacenar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "almacenar",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceHistorial": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "historial",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDocs": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "docs",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDocsjson": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "docs.json",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodLoginOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodFusionadosOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceFusionados"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAlmacenarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAlmacenar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodHistorialOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceHistorial"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDocsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDocs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDocsjsonOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDocsjson"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodLoginPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LoginLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "LoginLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodFusionadosGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceFusionados"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "JwtAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetFusionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "JwtAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAlmacenarPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAlmacenar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "JwtAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "PostStoreLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "JwtAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodHistorialGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceHistorial"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "JwtAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetHistoryLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "JwtAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodDocsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDocs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DocsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DocsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDocsjsonGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDocsjson"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DocsJsonLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DocsJsonLambdaPermissionApiGateway"
          ]
        },
        "JwtAuthorizerApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 300,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "jwtAuthorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "AuthorizerUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "JwtAuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            },
            "Type": "REQUEST"
          }
        },
        "ApiGatewayDeployment1754885229691": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodLoginOptions",
            "ApiGatewayMethodFusionadosOptions",
            "ApiGatewayMethodAlmacenarOptions",
            "ApiGatewayMethodHistorialOptions",
            "ApiGatewayMethodDocsOptions",
            "ApiGatewayMethodDocsjsonOptions",
            "ApiGatewayMethodLoginPost",
            "ApiGatewayMethodFusionadosGet",
            "ApiGatewayMethodAlmacenarPost",
            "ApiGatewayMethodHistorialGet",
            "ApiGatewayMethodDocsGet",
            "ApiGatewayMethodDocsjsonGet"
          ]
        },
        "LoginLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetFusionLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetFusionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "JwtAuthorizerLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "JwtAuthorizerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "PostStoreLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostStoreLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetHistoryLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetHistoryLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DocsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DocsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DocsJsonLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DocsJsonLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "FusionTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-FusionTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": false
            },
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "FusionDataStorage"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        },
        "CacheTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-CacheTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "cacheKey",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "cacheKey",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "expiresAt",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "APICache"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        },
        "CustomTableV2": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-CustomTableV2",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "CustomDataStorage"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "swapi-weather-fusion-deploy-bucket",
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
          }
        },
        "LoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LoginLambdaVersioncWUp1NZik5yhbGgYAJLvoWBJyyMvpd4K8J0NkqoT3Pk"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-LoginLambdaFunctionQualifiedArn"
          }
        },
        "GetFusionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetFusionLambdaVersionBgILK9NS5g3wFSvJo7DjGogrFIX9ab7G7598UyYw"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
          }
        },
        "PostStoreLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostStoreLambdaVersionMPRhohWJIQgLlo4lrD0RWFEEPBvo8ArHvatTbmIehGw"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
          }
        },
        "GetHistoryLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetHistoryLambdaVersionA0EgkBl2qdZev6I4M020orzdfUsz1CClgjr40ah0XNQ"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
          }
        },
        "JwtAuthorizerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "JwtAuthorizerLambdaVersionO8w6N52wWph1U9AlwoppW1adFyPG91h2Mc7Q2JSwz2c"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-JwtAuthorizerLambdaFunctionQualifiedArn"
          }
        },
        "DocsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DocsLambdaVersionJrfLTSOiL4lc6yB4KwxjiYak99A1bao7qChWnuxK4w"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-DocsLambdaFunctionQualifiedArn"
          }
        },
        "DocsJsonLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DocsJsonLambdaVersion2yxBVJp0CsWpiwmpQkXAmXJy4lBbV8j2lZqVqBT3gI"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-DocsJsonLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}