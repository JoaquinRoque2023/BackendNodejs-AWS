{
  "C:\\proyectoTemporal\\swapi-weather-fusion\\serverless.yml": {
    "versionFramework": "4.18.0",
    "servicePath": "C:\\proyectoTemporal\\swapi-weather-fusion\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "joaquinproyecto",
      "app": "proyectosofttek",
      "service": "swapi-weather-fusion",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "memorySize": 512,
        "timeout": 29,
        "deploymentBucket": "swapi-weather-fusion-deploy-bucket",
        "disableRollback": true,
        "environment": {
          "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
          "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
          "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Scan",
              "dynamodb:Query"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
              "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
              "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
              "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:PutParameter"
            ],
            "Resource": "*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "swapi-weather-fusion-deploy-bucket"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetFusionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
              }
            },
            "PostStoreLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
              }
            },
            "GetHistoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "swapi-weather-fusion",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:Scan",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
                            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
                            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject"
                          ],
                          "Resource": [
                            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
                            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "ssm:GetParameter",
                            "ssm:PutParameter"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "swapi-weather-fusion",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetFusionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/fusion.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-getFusion",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetFusionLogGroup"
              ]
            },
            "PostStoreLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/store.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-postStore",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostStoreLogGroup"
              ]
            },
            "GetHistoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                  "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
                },
                "Handler": "handlers/history.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-weather-fusion-dev-getHistory",
                "MemorySize": 512,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                    "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                    "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetHistoryLogGroup"
              ]
            },
            "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetFusionLambdaFunction"
                },
                "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
              }
            },
            "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostStoreLambdaFunction"
                },
                "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
              }
            },
            "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetHistoryLambdaFunction"
                },
                "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-swapi-weather-fusion",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceFusionados": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "fusionados",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAlmacenar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "almacenar",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceHistorial": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "historial",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodFusionadosOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFusionados"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAlmacenarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAlmacenar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHistorialOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHistorial"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodFusionadosGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFusionados"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetFusionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetFusionLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAlmacenarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAlmacenar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostStoreLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostStoreLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodHistorialGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHistorial"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetHistoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetHistoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1754872355349": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodFusionadosOptions",
                "ApiGatewayMethodAlmacenarOptions",
                "ApiGatewayMethodHistorialOptions",
                "ApiGatewayMethodFusionadosGet",
                "ApiGatewayMethodAlmacenarPost",
                "ApiGatewayMethodHistorialGet"
              ]
            },
            "GetFusionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetFusionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PostStoreLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostStoreLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetHistoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetHistoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "FusionTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "swapi-weather-fusion-FusionTable",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "pk",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "sk",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "sk",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": false
                },
                "Tags": [
                  {
                    "Key": "Purpose",
                    "Value": "FusionDataStorage"
                  },
                  {
                    "Key": "Service",
                    "Value": "swapi-weather-fusion"
                  }
                ]
              }
            },
            "CacheTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "swapi-weather-fusion-CacheTable",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "cacheKey",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "cacheKey",
                    "KeyType": "HASH"
                  }
                ],
                "TimeToLiveSpecification": {
                  "AttributeName": "expiresAt",
                  "Enabled": true
                },
                "Tags": [
                  {
                    "Key": "Purpose",
                    "Value": "APICache"
                  },
                  {
                    "Key": "Service",
                    "Value": "swapi-weather-fusion"
                  }
                ]
              }
            },
            "CustomTableV2": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "swapi-weather-fusion-CustomTableV2",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "pk",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "sk",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "sk",
                    "KeyType": "RANGE"
                  }
                ],
                "Tags": [
                  {
                    "Key": "Purpose",
                    "Value": "CustomDataStorage"
                  },
                  {
                    "Key": "Service",
                    "Value": "swapi-weather-fusion"
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "swapi-weather-fusion-deploy-bucket",
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetFusionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
              }
            },
            "PostStoreLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
              }
            },
            "GetHistoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0"
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-offline"
      ],
      "functions": {
        "getFusion": {
          "handler": "handlers/fusion.handler",
          "events": [
            {
              "http": {
                "path": "fusionados",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-getFusion",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk"
        },
        "postStore": {
          "handler": "handlers/store.handler",
          "events": [
            {
              "http": {
                "path": "almacenar",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-postStore",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g"
        },
        "getHistory": {
          "handler": "handlers/history.handler",
          "events": [
            {
              "http": {
                "path": "historial",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-weather-fusion-dev-getHistory",
          "package": {},
          "memory": 512,
          "timeout": 29,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0"
        }
      },
      "resources": {
        "Resources": {
          "FusionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-FusionTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": false
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "FusionDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CacheTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "cacheKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "cacheKey",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "expiresAt",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "APICache"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CustomTableV2": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CustomTableV2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "CustomDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "memorySize": 512,
      "timeout": 29,
      "deploymentBucket": "swapi-weather-fusion-deploy-bucket",
      "disableRollback": true,
      "environment": {
        "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
        "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
        "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
        "NODE_OPTIONS": "--enable-source-maps"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Scan",
            "dynamodb:Query"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:PutParameter"
          ],
          "Resource": "*"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "swapi-weather-fusion-deploy-bucket"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetFusionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
            }
          },
          "PostStoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
            }
          },
          "GetHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "swapi-weather-fusion",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Scan",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
                          "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
                          "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
                          "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ssm:GetParameter",
                          "ssm:PutParameter"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "swapi-weather-fusion",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetFusionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/fusion.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-getFusion",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFusionLogGroup"
            ]
          },
          "PostStoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/store.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-postStore",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostStoreLogGroup"
            ]
          },
          "GetHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/history.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-getHistory",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetHistoryLogGroup"
            ]
          },
          "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFusionLambdaFunction"
              },
              "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
            }
          },
          "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostStoreLambdaFunction"
              },
              "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
            }
          },
          "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetHistoryLambdaFunction"
              },
              "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-swapi-weather-fusion",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceFusionados": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fusionados",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlmacenar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "almacenar",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHistorial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "historial",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFusionadosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlmacenarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHistorialOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFusionadosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFusionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFusionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAlmacenarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostStoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PostStoreLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHistorialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetHistoryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1754872355349": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFusionadosOptions",
              "ApiGatewayMethodAlmacenarOptions",
              "ApiGatewayMethodHistorialOptions",
              "ApiGatewayMethodFusionadosGet",
              "ApiGatewayMethodAlmacenarPost",
              "ApiGatewayMethodHistorialGet"
            ]
          },
          "GetFusionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFusionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostStoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostStoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetHistoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FusionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-FusionTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": false
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "FusionDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CacheTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "cacheKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "cacheKey",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "expiresAt",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "APICache"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CustomTableV2": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CustomTableV2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "CustomDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "swapi-weather-fusion-deploy-bucket",
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetFusionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
            }
          },
          "PostStoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
            }
          },
          "GetHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "6TLrvJKDd3v9wsfCMf",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "org: joaquinproyecto\r\napp: proyectosofttek\r\nservice: swapi-weather-fusion\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: us-east-1\r\n  # Optimizaciones de costos\r\n  memorySize: 512  # Ajustado para mejor rendimiento/costo\r\n  timeout: 29      # Máximo para API Gateway (cambiado de 30 a 29)\r\n  deploymentBucket:\r\n    name: swapi-weather-fusion-deploy-bucket # Debe ser único en todo AWS\r\n  disableRollback: true\r\n  \r\n  environment:\r\n    FUSION_TABLE: ${self:service}-FusionTable\r\n    CACHE_TABLE: ${self:service}-CacheTable\r\n    CUSTOM_TABLE: ${self:service}-CustomTableV2  # Cambiado el nombre\r\n    NODE_OPTIONS: '--enable-source-maps'  # Para mejor debugging\r\n    \r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:Scan\r\n        - dynamodb:Query\r\n      Resource:\r\n        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-FusionTable\r\n        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-CacheTable\r\n        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-CustomTableV2  # Cambiado aquí también\r\n    - Effect: Allow\r\n      Action:\r\n        - s3:GetObject\r\n        - s3:PutObject\r\n      Resource:\r\n        - arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001\r\n        - arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*\r\n    - Effect: Allow\r\n      Action:\r\n        - ssm:GetParameter\r\n        - ssm:PutParameter\r\n      Resource: \"*\"\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nfunctions:\r\n  # GET /fusionados - Fusiona datos de SWAPI y API meteorológica\r\n  getFusion:\r\n    handler: handlers/fusion.handler\r\n    events:\r\n      - http:\r\n          path: fusionados\r\n          method: get\r\n          cors: true\r\n    \r\n  # POST /almacenar - Almacena datos personalizados\r\n  postStore:\r\n    handler: handlers/store.handler\r\n    events:\r\n      - http:\r\n          path: almacenar\r\n          method: post\r\n          cors: true\r\n    \r\n  # GET /historial - Retorna historial paginado\r\n  getHistory:\r\n    handler: handlers/history.handler\r\n    events:\r\n      - http:\r\n          path: historial\r\n          method: get\r\n          cors: true\r\n\r\nresources:\r\n  Resources:\r\n    # Tabla para datos fusionados (historial de /fusionados)\r\n    FusionTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-FusionTable\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: pk\r\n            AttributeType: S\r\n          - AttributeName: sk\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: pk\r\n            KeyType: HASH\r\n          - AttributeName: sk\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: false  # Deshabilitado para reducir costos\r\n        Tags:\r\n          - Key: Purpose\r\n            Value: FusionDataStorage\r\n          - Key: Service\r\n            Value: ${self:service}\r\n\r\n    # Tabla para caché con TTL\r\n    CacheTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-CacheTable\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: cacheKey\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: cacheKey\r\n            KeyType: HASH\r\n        TimeToLiveSpecification:\r\n          AttributeName: expiresAt\r\n          Enabled: true\r\n        Tags:\r\n          - Key: Purpose\r\n            Value: APICache\r\n          - Key: Service\r\n            Value: ${self:service}\r\n\r\n    # Tabla para datos personalizados (RENOMBRADA)\r\n    CustomTableV2:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-CustomTableV2  # Nuevo nombre\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: pk\r\n            AttributeType: S\r\n          - AttributeName: sk\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: pk\r\n            KeyType: HASH\r\n          - AttributeName: sk\r\n            KeyType: RANGE\r\n        Tags:\r\n          - Key: Purpose\r\n            Value: CustomDataStorage\r\n          - Key: Service\r\n            Value: ${self:service}",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "230a4241-e75f-44ae-9e42-df758922803f",
    "orgName": "joaquinproyecto",
    "userId": "2WtbjR3PbJQWtTF7PT",
    "userName": "joaquinproyecto",
    "serviceProviderAwsAccountId": "399605429268",
    "serviceProviderAwsCfStackName": "swapi-weather-fusion-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:399605429268:stack/swapi-weather-fusion-dev/1a3ec1b0-7596-11f0-a8ab-123a81415df7",
    "serviceProviderAwsCfStackCreated": "2025-08-10T02:59:59.557Z",
    "serviceProviderAwsCfStackUpdated": "2025-08-11T00:30:04.851Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetHistoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-getHistory:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetFusionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-getFusion:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PostStoreLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:399605429268:function:swapi-weather-fusion-dev-postStore:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://1btqwn6691.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "swapi-weather-fusion-deploy-bucket",
        "ExportName": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetFusionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
          }
        },
        "PostStoreLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
          }
        },
        "GetHistoryLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "swapi-weather-fusion",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
                        "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
                        "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
                        "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter",
                        "ssm:PutParameter"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "swapi-weather-fusion",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "GetFusionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/fusion.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-getFusion",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetFusionLogGroup"
          ]
        },
        "PostStoreLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/store.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-postStore",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostStoreLogGroup"
          ]
        },
        "GetHistoryLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "swapi-weather-fusion-deploy-bucket",
              "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
            },
            "Handler": "handlers/history.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "swapi-weather-fusion-dev-getHistory",
            "MemorySize": 512,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetHistoryLogGroup"
          ]
        },
        "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetFusionLambdaFunction"
            },
            "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
          }
        },
        "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostStoreLambdaFunction"
            },
            "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
          }
        },
        "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetHistoryLambdaFunction"
            },
            "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-swapi-weather-fusion",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceFusionados": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "fusionados",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAlmacenar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "almacenar",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceHistorial": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "historial",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodFusionadosOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceFusionados"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAlmacenarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAlmacenar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodHistorialOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceHistorial"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodFusionadosGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceFusionados"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetFusionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetFusionLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAlmacenarPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAlmacenar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "PostStoreLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "PostStoreLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodHistorialGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceHistorial"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetHistoryLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetHistoryLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1754872355349": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodFusionadosOptions",
            "ApiGatewayMethodAlmacenarOptions",
            "ApiGatewayMethodHistorialOptions",
            "ApiGatewayMethodFusionadosGet",
            "ApiGatewayMethodAlmacenarPost",
            "ApiGatewayMethodHistorialGet"
          ]
        },
        "GetFusionLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetFusionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "PostStoreLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostStoreLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetHistoryLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetHistoryLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "FusionTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-FusionTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": false
            },
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "FusionDataStorage"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        },
        "CacheTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-CacheTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "cacheKey",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "cacheKey",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "expiresAt",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "APICache"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        },
        "CustomTableV2": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-CustomTableV2",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "CustomDataStorage"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "swapi-weather-fusion-deploy-bucket",
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
          }
        },
        "GetFusionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
          }
        },
        "PostStoreLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
          }
        },
        "GetHistoryLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0"
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}