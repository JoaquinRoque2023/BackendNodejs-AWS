{
  "service": {
    "service": "swapi-weather-fusion",
    "serviceObject": {
      "name": "swapi-weather-fusion"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "memorySize": 512,
      "timeout": 29,
      "deploymentBucket": "swapi-weather-fusion-deploy-bucket",
      "disableRollback": true,
      "environment": {
        "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
        "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
        "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
        "NODE_OPTIONS": "--enable-source-maps"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Scan",
            "dynamodb:Query"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-FusionTable",
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CacheTable",
            "arn:aws:dynamodb:us-east-1:399605429268:table/swapi-weather-fusion-CustomTableV2"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001",
            "arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:PutParameter"
          ],
          "Resource": "*"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "swapi-weather-fusion-deploy-bucket"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetFusionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getFusion"
            }
          },
          "PostStoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-postStore"
            }
          },
          "GetHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/swapi-weather-fusion-dev-getHistory"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "swapi-weather-fusion",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-weather-fusion-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "swapi-weather-fusion",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetFusionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/fusion.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-getFusion",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFusionLogGroup"
            ]
          },
          "PostStoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/store.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-postStore",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostStoreLogGroup"
            ]
          },
          "GetHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "swapi-weather-fusion-deploy-bucket",
                "S3Key": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z/swapi-weather-fusion.zip"
              },
              "Handler": "handlers/history.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "swapi-weather-fusion-dev-getHistory",
              "MemorySize": 512,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "FUSION_TABLE": "swapi-weather-fusion-FusionTable",
                  "CACHE_TABLE": "swapi-weather-fusion-CacheTable",
                  "CUSTOM_TABLE": "swapi-weather-fusion-CustomTableV2",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetHistoryLogGroup"
            ]
          },
          "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFusionLambdaFunction"
              },
              "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
            }
          },
          "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostStoreLambdaFunction"
              },
              "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
            }
          },
          "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetHistoryLambdaFunction"
              },
              "CodeSha256": "v+PuS7GxGExR1tzEaKczoK10tTbob5r0FSnkA3sJNm4="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-swapi-weather-fusion",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceFusionados": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fusionados",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlmacenar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "almacenar",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHistorial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "historial",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFusionadosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlmacenarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHistorialOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFusionadosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFusionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFusionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAlmacenarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostStoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PostStoreLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHistorialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetHistoryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1754872355349": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFusionadosOptions",
              "ApiGatewayMethodAlmacenarOptions",
              "ApiGatewayMethodHistorialOptions",
              "ApiGatewayMethodFusionadosGet",
              "ApiGatewayMethodAlmacenarPost",
              "ApiGatewayMethodHistorialGet"
            ]
          },
          "GetFusionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFusionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostStoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostStoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetHistoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FusionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-FusionTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": false
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "FusionDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CacheTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "cacheKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "cacheKey",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "expiresAt",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "APICache"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          },
          "CustomTableV2": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "swapi-weather-fusion-CustomTableV2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "Tags": [
                {
                  "Key": "Purpose",
                  "Value": "CustomDataStorage"
                },
                {
                  "Key": "Service",
                  "Value": "swapi-weather-fusion"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "swapi-weather-fusion-deploy-bucket",
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetFusionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-GetFusionLambdaFunctionQualifiedArn"
            }
          },
          "PostStoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-PostStoreLambdaFunctionQualifiedArn"
            }
          },
          "GetHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0"
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-GetHistoryLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-swapi-weather-fusion-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getFusion": {
        "handler": "handlers/fusion.handler",
        "events": [
          {
            "http": {
              "path": "fusionados",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "swapi-weather-fusion-dev-getFusion",
        "package": {},
        "memory": 512,
        "timeout": 29,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetFusionLambdaVersionGFRacIhqr593V3JoXiEqyrg8ijasr6lyOBqn2bcgQk"
      },
      "postStore": {
        "handler": "handlers/store.handler",
        "events": [
          {
            "http": {
              "path": "almacenar",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "swapi-weather-fusion-dev-postStore",
        "package": {},
        "memory": 512,
        "timeout": 29,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "PostStoreLambdaVersionGWlN4mSDLpbk8REwPlSY35nBvn7EgTvrZTzDmPy75g"
      },
      "getHistory": {
        "handler": "handlers/history.handler",
        "events": [
          {
            "http": {
              "path": "historial",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "swapi-weather-fusion-dev-getHistory",
        "package": {},
        "memory": 512,
        "timeout": 29,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetHistoryLambdaVersionb2u9RrPLI2XeKqxCzYGUFAGRZgljciOHqZ0Gazv0"
      }
    },
    "resources": {
      "Resources": {
        "FusionTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-FusionTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": false
            },
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "FusionDataStorage"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        },
        "CacheTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-CacheTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "cacheKey",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "cacheKey",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "expiresAt",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "APICache"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        },
        "CustomTableV2": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "swapi-weather-fusion-CustomTableV2",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "Tags": [
              {
                "Key": "Purpose",
                "Value": "CustomDataStorage"
              },
              {
                "Key": "Service",
                "Value": "swapi-weather-fusion"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "org": "joaquinproyecto",
      "app": "proyectosofttek",
      "service": "swapi-weather-fusion",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "proyectosofttek",
    "appId": null,
    "org": "joaquinproyecto",
    "orgId": null,
    "layers": {},
    "artifact": "C:\\proyectoTemporal\\swapi-weather-fusion\\.serverless\\swapi-weather-fusion.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/swapi-weather-fusion/dev/1754872362425-2025-08-11T00:32:42.425Z",
    "artifact": "swapi-weather-fusion.zip"
  }
}