org: joaquinproyecto
app: proyectosofttek
service: swapi-weather-fusion

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  memorySize: 512
  timeout: 29
  deploymentBucket:
    name: swapi-weather-fusion-deploy-bucket
  disableRollback: true
  
  environment:
    FUSION_TABLE: ${self:service}-FusionTable
    CACHE_TABLE: ${self:service}-CacheTable
    CUSTOM_TABLE: ${self:service}-CustomTableV2
    NODE_OPTIONS: '--enable-source-maps'
    JWT_SECRET: SofttekSecretKey
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-FusionTable
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-CacheTable
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-CustomTableV2
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001
        - arn:aws:s3:::swapi-weather-fusion-deploy-bucket-joaquin-001/*
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:PutParameter
      Resource: "*"

plugins:
  - serverless-offline

functions:
  # LOGIN: Genera y devuelve un JWT
  login:
    handler: handlers/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  
  getFusion:
    handler: handlers/fusion.handler
    events:
      - http:
          path: fusionados
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
    
  postStore:
    handler: handlers/store.handler
    events:
      - http:
          path: almacenar
          method: post
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
    
  getHistory:
    handler: handlers/history.handler
    events:
      - http:
          path: historial
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization

  # Authorizer Lambda para validar JWT
  jwtAuthorizer:
    handler: lib/authMiddleware.requireAuth

  docs:
    handler: handlers/docs.handler
    events:
      - http:
          path: docs
          method: get
          cors: true
          
  docsJson:
    handler: handlers/docs.jsonHandler
    events:
      - http:
          path: docs.json
          method: get
          cors: true
           
resources:
  Resources:
    FusionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-FusionTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: false
        Tags:
          - Key: Purpose
            Value: FusionDataStorage
          - Key: Service
            Value: ${self:service}

    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-CacheTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        Tags:
          - Key: Purpose
            Value: APICache
          - Key: Service
            Value: ${self:service}

    CustomTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-CustomTableV2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        Tags:
          - Key: Purpose
            Value: CustomDataStorage
          - Key: Service
            Value: ${self:service}
custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: SWAPI Weather Fusion API
        description: 'API que fusiona datos de Star Wars (SWAPI) con información meteorológica'
        contact:
          name: Equipo Softtek
          email: soporte@softtek.com
        license:
          name: MIT
          url: https://opensource.org/licenses/MIT
      servers:
        - url: https://api.gateway.url
          description: Servidor de producción
        - url: http://localhost:3000
          description: Servidor local
      components:
        securitySchemes:
          bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
      tags:
        - name: Authentication
          description: Operaciones de autenticación
        - name: Fusion Data
          description: Datos combinados SWAPI + Weather
        - name: Data Storage
          description: Almacenamiento de datos personalizados
        - name: History
          description: Historial de operaciones
        - name: Documentation
          description: Documentación de la API